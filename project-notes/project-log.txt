
--- Project Setup ---

This project setup does not include routing
because it aims to be for Single Page Apps.
Another setup will include it.
Sources of notes at the end of this text.

To use this:
    1. clone the repo
    2. in terminal, go to that directory
    3. $ npm init (to create the node_modules folder)
    4. $ npm install (will grab dependencies from package.json and download all required)
    5. at webpack.config.js look for buildMod variable, and set it up to "development" if you want to dev the app, or to "production" if you want webpack to build the css files
    6. $ npm run build
    7. $ npm run dev (will start the live server of Webpack, at localhost:8080)


------------------------------------------------------
01. Make sure that node and npm are already installed
        $ node -v

    If throws a non-exists error, do:
        $ nvm ls

    and choose a nvm (installed) version to use
        $ nvm use 18.5


------------------------------------------------------
02. Go to the project´s directory
        $ cd <project dir>


------------------------------------------------------
03. Initialize npm with package.json
        $ npm init


------------------------------------------------------
04. Initialize git
        $ git init

    Create the .gitignore
    Write the folder name inside .gitignore file:
        /node_modules/
        /dist

    /node_modules/ contains the installed dependencies, and tends to be a large file, so its better to ignore it for git push
    /dist contains the built code, which will be changing often, so its better to ignore it

    If you made commits:
    make git "forget" (untrack) node_modules:
        $ git rm -r --cached .

    Then (re)stage the files:
        git add <the files>

   
------------------------------------------------------
05. GitHub CLI setup

    Already installed github cli at this system, so

    First:
        $ gh auth login

        (Follow the instructions)
        https://github.com/login/device/
        etc
    
    Second:
        Create gh repository at your auth user

        $ gh repo create

        (Follow the instructions)

        If you clone the remote repo, it will be at where you are in the terminal


------------------------------------------------------
06. Install dev dependencies: webpack + webpack-cli
    Webpack (file bundler) will build the webapp and serve the local development server

        $ npm install --save-dev webpack

    https://www.npmjs.com/package/webpack

    and
        $ npm install --save-dev webpack-cli

    https://www.npmjs.com/package/webpack-cli
    
    Webpack-CLI provides a set of tools to improve the setup of custom webpack configuration.

    To display basic commands and arguments:
        $ npx webpack-cli --help
    or
        $ npx webpack-cli --help verbose

    Try webpack with default settings (works?):
        $ npx webpack

    (From the warnings/errors create the directory structure)


------------------------------------------------------
07. Create the initial directory structure for the project

    Have at least:
        ./src/index.js    

    then
        $ npx webpack
    
    With default settings, it will create:
        ./dist/main.js

    src: all the code I write (example: index.js, templates for building ./dist/index.html)
    dist: where all the static assets will be built
    
    Note: you don´t update manually the output.
    You edit the files at ./src directory, then re build


------------------------------------------------------
08. Define the build script at package.json:

    "scripts": {
        ...
        "build": "webpack --mode production"
    },

    usage:
        $ npm run build
    
    Because at this stage there is no webpack config use the flag --mode production.
    This creates whatever specified for production, 
    but at the moment will create the file "main.js" 
    at the dist directory.


------------------------------------------------------
09. Install dev dependencies: babel + preset + babel-loader
    
    Babel core install:
    https://babeljs.io/setup#installation

    	$ npm install --save-dev @babel/core

    Install preset-env, which enables transforms for ES2015+ backward compatibility:
		$ npm install --save-dev @babel/preset-env
	
    Install babel-loader, which enables loading the specified files to webpack:
    	$ npm install --save-dev babel-loader
	
	Also could be done in one line:
		$ npm install --save-dev @babel/core @babel/preset-env babel-loader


------------------------------------------------------
10. Create a webpack config file: webpack.config.js

    On the project root dir:
    (alongside package.json)

        webpack.config.js


    In webpack.config.js:

        // import webpack module for tinkering with code
        const { web, webpack } = require("webpack");

        // define the exported configuration object
        module.exports = {
            // replaces the flag --mode
            mode: "development",
        }
    
    Now remove --mode production from the build script:

        "scripts": {
            ...
            "build": "webpack"
        },


------------------------------------------------------
11. Create a babel config file at the root of the project: .babelrc.json (or babel.config.js)

    https://babeljs.io/docs/en/config-files
    Babel has two parallel config file formats, which can be used together, or independently.

    Project-wide configuration:
        babel.config.* files, with the following extensions: .json, .js, .cjs, .mjs.

    File-relative configuration
        .babelrc.* files, with the following extensions: .json, .js, .cjs, .mjs.
        .babelrc file, with no extension.
        package.json files, with a "babel" key.

    When to use which one:
        Use babel.config.json when the whole project uses the same configuration
        Use .babelrc.json when transforming a subdirectory and not the whole project

        Use *.json for static file configurations
        Use *.js to expose the API config for conditional or at build 


    At the file .babelrc.json
        {
            "presets": ["@babel/preset-env"]
        }
    

    Optional: instead of using .babelrc.json,
    can be at webpack.config.js

    module: {
        rules: [
            {
                // grab all *.js
                test: /\.js$/,
                // not these
                exclude: /node_modules/,
                use: {
                    loader: "babel-loader",
                    options: {
                        presets: ["@babel/preset-env"]
                    }
                }
            }
        ]
    }


    Optional: when dealing with multiple loaders can be useful to have a
    babel.config.js

        module.exports = {
            presets: ["@babel/preset-env"]
        }


------------------------------------------------------
12. Add source maps for debugging at webback.config.js 

    module.exports = {
        // mode: "production" outputs use strict, minified code, etc.
        // mode: "development" is built for fast live refresh, has guiding comments, etc.
        mode: "development",

        // already added
        module: {},

        // source maps for debugging
        // creates a file.ext.map that maps each part to a location
        devtool: "source-map"
    }


------------------------------------------------------
13. Install dev dependencies: html-webpack-plugin
    The plugin will generate HTML5 files for you that includes all your webpack bundles in the body using script tags.
    
    This plugin can generate multiple files if there are multiple entry points,
    and 1 html file if there is 1 entry point

    https://github.com/jantimon/html-webpack-plugin#options

    First:
    at the root directory of the project (so it can install the modules inside the node_modules directory):

        $ npm install --save-dev html-webpack-plugin
    
    https://www.npmjs.com/package/html-webpack-plugin


    Second:
    at webpack.config.js:

    // import module
    const HtmlWebpackPlugin = require('html-webpack-plugin');

    // at module.exports:
    module.exports = {
        // ...
        plugins: [
            new HtmlWebpackPlugin({
                title: "project",
                // create as filename, can be [name].html when more than the index
                filename: "index.html",
                // load a custom template (lodash by default)
                template: "src/html-templates/index-template.html"
            })
        ],
    }


    Third:
    In the ./src/html-templates directory, create a template html named like that
    At the template.html create a boilerplate html code,
    and use this for the title:
    <%= htmlWebpackPlugin.options.title %>

    You can grab values from the webpack.config.js
    and use them in the output html file


------------------------------------------------------
14. Add a flag to the build script to watch file changes: --watch
    
    Webpack comes with a flag for that: --watch
    it will rebuild each time it detects a change at the files defined to be watched at the config file.

    At package.json

        "scripts": {
            ...
            "build": "webpack --watch"
        },

    You can exit the looping watch mode with Ctrl+C
    
    Don´t forget to remove the --watch flag
    when you are building production deploys.


------------------------------------------------------
15. Now that --watch is working, add the Webpack Live Server: webpack-dev-server

    First:
    at the root directory of the project, at terminal:

        $ npm install --save-dev webpack-dev-server


    Second:
    at webpack.config.js:

    // enable the Node´s path lookup for path.resolve
    const path = require("path");    

    then

    // add the live server to the exported configuration object    
    module.exports = {
        mode: "development",
        module: {},
        devtool: "source-map",

        // live server
        devServer: {
            static: {
                // this will tell webpack from where serve files
                directory: path.resolve(__dirname, "dist")
            },
            port: 8080,
            // hot reload should be true for hot module replacement (HMR)
            hot: true,
            // compress to gzip
            compress: true,
            // tells when paths are broken
            historyApiFallback: true,
            // whitelist from where it will open
            allowedHosts: ["localhost"],
        },
        // add this because webpack 5 bug of not reloading
        target: "web",
    }

    
    Now, the live server will be listening for changes, then reload
    The difference between VS Code Live Server and Webpack Live Server is that with webpack server you can specify what to serve 

    Note that the webpack server runs from memory,
    so even if you delete the ./dist/ directory it will load the content.


------------------------------------------------------
16. Create a script to launch the webpack live server

    At package.json:

        "scripts": {
            ...,
            "build": "webpack --watch",
            "dev": "webpack serve"
        },

    Usage:
    (changed some files at this point so: build)
        $ npm run build
        $ npm run dev
    
    You can exit it at terminal: Ctrl+C


------------------------------------------------------
17. Define the entry points and the output points at webpack.config.js

    For each entry an output file will be created.
    You can replace the entry = {} with a variable that holds a list (generated from the ./src dir structure, or manually written).
    
    Output defines the destination where all the built files will be sent (there is no need of exact file naming besides using [name], [hash], etc)

    To enable multiple html file creation:
    optional: at webpack.config.js:

    const entry = {
        entry1: path.resolve(__dirname, "path/entry1.js"),
        entry2: path.resolve(__dirname, "path/entry2.js")
    }

    then:
    module.exports = {
        ...,
        entry,
        output: {}
    }


    But try this first:
    at webpack.config.js:

    module.exports = {
        mode: "development",
        module: {},
        devtool: "source-map",
        devServer: {},
        target: "web",

        // add this, to generate 1 html 
        entry: {
            bundle: path.resolve(__dirname, "src/index.js"),
        },
        output: {
            // requires path and filename
            // path requires an absolute path, but it is a maint nightmare to manually edit at each deployment, so it is used as path.resolve
            path: path.resolve(__dirname, "dist"),
            // you can use the [name] to name whatever was defined at the entry path name, in this case is bundle
            filename: "[name].js"
        }
    }


------------------------------------------------------
18. Set up HtmlWebpackPlugin head & meta tags (no schema yet)

    The meta option can inject meta tags, but appends each meta tag one next to the next.
    So the approach is to provide the lines from htmlWebpackPlugin.tags.headTags
    at the template file,
    which will grab key: values from the meta: {} defined at webpack.config.js
    https://stackoverflow.com/questions/58562573/html-webpack-plugin-and-new-lines-after-injection
    https://github.com/terser/html-minifier-terser

    at the template html:

    <head>
        <% for (const tag of htmlWebpackPlugin.tags.headTags) { %><%= tag %>
        <% } %>
        <title><%= htmlWebpackPlugin.options.title %></title>
    </head>

    Note:
    There is no need to add a <link> for the css because webpack handles it

    Note:
    <% %>  An embedded code block is server code that executes during the page's render phase. 
    <%= %> most useful for displaying single pieces of information.
    https://social.msdn.microsoft.com/Forums/en-US/4bd327a0-7f1c-4bf0-a052-ad543d67aa14/what-are-these-special-tags-lt-and-lt?forum=aspgettingstarted


    at webpack.config.js

    plugins: [
        new HtmlWebpackPlugin({
            ...,
            // do not inject from here
            inject: false,
            // do not collapse the lines
            minify: { collapseWhitespace: false },
            // meta tags
            "meta": {
                //"name": "content" ---> <meta name="name" content="content">
                "viewport": "width=device-width, initial-scale=1, shrink-to-fit=no"
            }
        }) 
    ]

    https://github.com/joshbuchea/HEAD
    https://developers.google.com/search/docs/advanced/robots/robots_meta_tag

    "viewport": "width=device-width, initial-scale=1, shrink-to-fit=no",
    "description": "A description of the page",

    // tells all search engines to index and follow
    "robots": "index,follow",
    // tells Google to index and follow
    "googlebot": "index, follow",
    // tells Google not to show the sitelinks search box
    "google": "nositelinkssearchbox",
    // tells Google to not show the page in Google News
    "googlebot-news": "noindex",
    // tells Google (choose the character length) to show snippet in search results
    "robots": "max-snippet:-1",

    // region for the content
    "geo.region": "country",

    // add this when possible at Google Search Console
    "google-site-verification": "verification_token",
    // add this when possible at Bing Webmaster Center
    "msvalidate.01": "verification_token",

    // add this one when you have the ssl cert installed
    // Place as early in the <head> as possible, as the tag only applies to resources that are declared after it.
    "Content-Security-Policy": { "http-equiv": "Content-Security-Policy", "content": "default-src https:" }, 


    https://webpack.js.org/plugins/html-webpack-plugin/
    https://github.com/jantimon/html-webpack-plugin#options
    If you have multiple webpack entry points, 
    they will all be included with <script> tags in the generated HTML.

    If you have any CSS assets in webpack's output 
    (for example, CSS extracted with the MiniCssExtractPlugin) 
    then these will be included with <link> tags in the <head> element of generated HTML.


    Note:
    To generate more than one HTML file, declare the plugin more than once in your plugins array

        plugins: [
            new HtmlWebpackPlugin({
                filename: "test.html",
                template: "src/templates/test.html",
                favicon: "src/favicon.gif"
            }),
            new HtmlWebpackPlugin({
                filename: "other.html",
                template: "src/templates/other.html"
            })
        ]

    
    favicon:
    This will transfer the icon to your build folder and include it in your tag like this <link rel="icon" href="icon.png">

            new HtmlWebpackPlugin({
                favicon: "src/favicon/icon.png"
            })


------------------------------------------------------
19. Enable cache for webpack builds

    When generating the assets it will append a hash.

    at the webpack.config.js
    where you declared the name property,
    add [contenthash]

        filename: "[name][contenthash].js"
    
    To avoid creating tons of hashed files you can add a line to
    webpack.config.js at the output
    so you keep only one hashed file:

        output: {
            path: path.resolve(__dirname, "dist"),
            filename: "[name][contenthash].js",
            clean: true,
        },


------------------------------------------------------
20. Install dev dependencies: sass, style-loader, css-loader, sass-loader

    First:
    At the project´s directory:

        $ npm install --save-dev sass
    
    adds it to your project (can be installed globally too)
    https://www.npmjs.com/package/sass


    And these loaders (to load the files to webpack)

        $ npm install --save-dev style-loader
        $ npm install --save-dev css-loader
        $ npm install --save-dev sass-loader

    Or as 1 line:
        $ npm i -D sass style-loader css-loader sass-loader
    

    Second:
    Inside the /src/ directory, create a subfolder called /styles/
    and there create a css file with sass extras (.scss)

    ./src/styles/main.scss


    Third:
    scss requires to be converted to css.
    Setting up the loaders at webpack.config.js:

    // with a rules array, with an object for each loader

    module.exports = {
        ...,
        module: {
            rule: [
                {
                    // get me all files with .scss extension
                    test: /\.scss$/,
                    // and use the loaders
                    use: [
                        // in webpack the array order matters: right to left
                        // first uses sass-loader, then "css-loader", then "style-loader"
                        "style-loader", "css-loader", "sass-loader"
                    ]
                }
            ]
        }
    }

    Note that webpack will not create any css files, 
    but will inject <style> tags dynamically with JavaScript.
    If you want to create separate css files, you can enable the mini-css-extract-plugin

------------------------------------------------------
21. Enable the image loader included on Webpack

    In /src/ directory create a directory called "images"

    ./src/images


    Webpack comes with an asset loader (known as asset management since webpack 5)
    (you dont need to install anything extra)
    Just enable it on the webpack.config.js

    module: {
        rules: [
            { ... },
            {
                // regex: find any *.png, *.svg, *.jpg, *.jpeg, *.gif, case insensitive
                test: /\.(png|svg|jpg|jpeg|gif)$/i,
                //exclude assets that came from new URL calls from the asset loaders
                // useful against url injections
                dependency: { not: ['url'] },
                // type
                type: "asset/resource"
            }
        ]
    }

    To avoid renaming the images, add this at the output:

        output: {
            ...,
            // this will send them to a generated "images" folder (rename it if needed)
            assetModuleFilename: "images/[name][ext]"
        }
    

    https://webpack.js.org/configuration/module/#rulegeneratoroutputpath
    output.assetModuleFilename works only with asset and asset/resource module types.        


------------------------------------------------------
22. Set up conditional builds between "development" with style-loader or "production" with mini-css-extract-plugin

    https://webpack.js.org/plugins/mini-css-extract-plugin/#recommended
    Note: it has a recommended script, but I could not use it as is, so adjusted it without NODE_ENV vars (for the moment).
    
    Do not use style-loader and mini-css-extract-plugin together.

    For production mode builds:
        It is recommended to extract the CSS from your bundle, 
        being able to use parallel load CSS/JS resources later on.
        This can be achieved by using the mini-css-extract-plugin,
        (MiniCssExtractPlugin.loader) because it creates separate css files.
        This will build code that runs faster.
        Also, can be used when you need to see the css output, css injected prefixes, etc.

    For development mode builds (including webpack-dev-server):
        Use style-loader, because it injects CSS into the DOM using multiple and works faster.
        The style-loader will inject the css to the JavaScript files (great for critical css globals).
        This will enable to build a lot more faster when using the Webpack Dev Server.
    
    Proposed flow: "sass-loader" --> "css-loader" --> either {style-loader or MiniCssExtractPlugin.loader}


    So, the approach is


    First:
    Install style-loader. Already is.

    Install mini-css-extract-plugin
    At the root, terminal:

        $ npm install --save-dev mini-css-extract-plugin

    https://www.npmjs.com/package/mini-css-extract-plugin

    It's recommended to combine mini-css-extract-plugin with the css-loader


    Second:
    at package.json: the build script

        "scripts": {
            "build": "webpack",
            "dev": "webpack serve"
        },


    Third:
    Add the loader and the plugin to your webpack.config.js

    // import mini-css-extract-plugin
    const MiniCssExtractPlugin = require("mini-css-extract-plugin");

    // change buildMode to the type of build, manually
    // set mode between "development" | "production" | "none"
    const buildMode = "development";

    // module exports a configuration object
    module.exports = {
        mode: buildMode,
        entry: {
            //...
        },
        output: {
            //...
        },
        module: {
            rules: [
                { 
                    //... 
                },
                {
                    // replaced the regex to allow files that ended with sass, scss and css
                    test: /\.(sa|sc|c)ss$/,
                    use: [
                        // if true use "style-loader", if false use "MiniCssExtractPlugin.loader"
                        buildMode !== "production" ? "style-loader" : MiniCssExtractPlugin.loader,
                        "css-loader",
                        "sass-loader",
                    ],
                },
            ],
        },
        plugins: [ 
            //...
        ].concat(buildMode !== "production" ? [] : [new MiniCssExtractPlugin()]),


------------------------------------------------------
23. Install dev dependencies: css-minimizer-webpack-plugin

    This will enable CSS optimization only in production mode.
    https://webpack.js.org/plugins/css-minimizer-webpack-plugin/


    First:
    at root

        $ npm install --save-dev css-minimizer-webpack-plugin
    

    Second:
    at webpack.config.js

    // import it
    const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");

    module.exports = {
        // ...
        optimization: {
            minimizer: [
                new CssMinimizerPlugin(),
            ]
        }
    }


    If you want to run it also in development set the optimization.minimize option to true

        module.exports = {
            // ...
            optimization: {
                // ...
                minimize: true,
            },
        };


    Remember to set the mode: "development" for a new npm run build
    while you are developing the web app
    because that way the web server will do faster builds


------------------------------------------------------
24. Setup sass scaffolding structure 

    A sass file starting with an underscore is a partial.

    .src/styles/main.scss
    .src/styles/_global.scss
    .src/styles/_variables.scss

    First, 
    at ./src/index.js 
    write:

    import "./styles/main.scss"


    Second, 
    at .src/styles/main.scss
    write:

        @use "global"; /* @use scopes locally, prefer it */


    Third,
    at .src/styles/_global.scss
    write:

        @use "variables";

        body {
            background-color: rgb(216, 16, 156);
            color: white;
        }


    Fourth, 
    at .src/styles/_variables.scss
    write:

        :root {
            --clr-dark: #000;
        }
        $bg: #FFF;

        /* Note that you can use both types, although is not recommended */


    Fifth:
    Replace at _global.scss

        @use "variables";

        body {
            background-color: variables.$bg;   /* sass variable */
            color: var(--text-clr-dark);       /* css variable */
        }


    It is operational.
    With buildMode = "production";

        $ npm run build
    
    Creates the css files.


------------------------------------------------------
25. Install dev dependencies: postcss + postcss-preset-env + postcss-loader

    PostCSS:
        is a tool for transforming styles with JS plugins, CSS-in-JS
        https://postcss.org/
        https://github.com/postcss/postcss
        https://www.npmjs.com/package/postcss

        Allows to inject vendor prefixes to CSS rules
        (like: -webkit-box', '-webkit-flex', '-ms-flexbox', 'flex'),
        enforce consistent conventions and avoid errors in your stylesheets with stylelint, etc.
        PostCSS has more than 200 plugins. 
        You can find all of the plugins in the plugins list or in the searchable catalog.

    PostCSS Preset Env
        Is a PostCSS plugin that lets you convert modern CSS into something most browsers can understand, 
        determining the polyfills you need based on your targeted browsers or runtime environments.
        https://www.npmjs.com/package/postcss-preset-env
        https://github.com/csstools/postcss-plugins/blob/HEAD/plugin-packs/postcss-preset-env/INSTALL.md#webpack
    
    Postcss Loader
        Loads postcss files to webpack.


    First:
    at the root, in terminal:

    Install PostCSS
        $ npm install --save-dev postcss
    
    Install postcss-preset-env
        $ npm install --save-dev postcss-preset-env
    
    Add PostCSS Loader to your project
        $ npm install --save-dev postcss-loader
    

    Second:
    at the root of the project,
    create a postcss.config.js file.
    Add postcss-preset-env to your configuration:

        module.exports = {
            plugins: [
                "postcss-preset-env",
                //require("autoprefixer"),
                //require("postcss-nested")
            ]
        }

    In case of options, use:
            plugins: [postcssPresetEnv(/* pluginOptions */)]


    Third:
    at webpack.config.js
        // import postcss
        const postcss = require('postcss');
        // import postcss-preset-env
        const postcssPresetEnv = require('postcss-preset-env');

            {
                test: /\.(sa|sc|c)ss$/,
                use: [
                    // if true use "style-loader", if false use "others"
                    buildMode !== "production" ? "style-loader" : MiniCssExtractPlugin.loader,
                    "css-loader",
                    "postcss-loader", // add it between sass-loader and css-loader
                    "sass-loader",
                ],
            },
    

    The flow will be:
        if buildMode = "development", use [ style-loader <-- css-loader <-- postcss-loader <-- sass-loader ]
        if buildMode = "production", use [ MiniCssExtractPlugin.loader <-- css-loader <-- postcss-loader <-- sass-loader ] 


    Note: when installing React, consider using Astroturf
    https://github.com/4Catalyzer/astroturf
    Add its loader to your webpack.config.js:

        module.exports = {
            module: {
                rules: [
                    {
                        test: /\.css$/,
                        use: ['style-loader', 'postcss-loader'],
                    },
                    {
                        test: /\.jsx?$/,
                        use: ['babel-loader', 'astroturf/loader'],
                    }
                ]
            }
        }


------------------------------------------------------
26. Create a list of supported web browsers: Browserlist

    It is a config to share target browsers and Node.js versions between different front-end tools,
    to compatibilize code that will reach those targets, so if a feature cannot work there then make the targets deal with the best fallbacks.

    Is useful because can be integrated to the flow of Autoprefixer
    to only include css prefixes for the supported targets.
    (For instance, only include webkit because all iOS browsers use WebKit)

    It is used in: 
        postcss autoprefixer
        babel-preset-env
        postcss-preset-env
        eslint-plugin-compat
        stylelint-no-unsupported-browser-features
        postcss-normalize
        obsolete-webpack-plugin

    Note that at least babel and postcss read from browserslist. 

    https://github.com/browserslist/browserslist

    Browserslist will take queries from:
        tool option
        browserslist config
        .browserslistrc config
        browserslist section in package.json
        or environment variables.


    There are 2 ways for setting the rules.
    One is at the .browserslistrc, the other is at the package.json.
    Each line in the file is a rule.

    First:
    Verify the installation of browserslist.
    It was installed previously as dependency of another one.
    To verify the installation, run:

        $ npx browserslist --version
    

    Second,
    at the root directory, create .browserslistrc

    Recommended: add a "browserslist": ["rule 1","rule 2"] at package.json

    
    Third,
    write the rules:
    https://github.com/browserslist/browserslist#full-list

        cover 99.5%
        since 2015
        not ie < 11
        maintained node versions


    Fourth,
    run npx browserslist in project directory to see what browsers was selected by your queries.
    (Don’t remove browsers just because you don’t know them)

        $ npx browserslist
    

    Expected result:
        at index-template.html
            ...
            <body>
                <main>
                    <p>Hello there! It werks! HEHE YEEEEAAAHHHH</p>
                    <img id="laughImg" />
                </main>
            </body>

        at _global.scss
            ...
            main {
                display:flex;
                flex-direction: column;
            }

        at webpack.config.js
            ...
            const buildMode = "production";
        
        at root dir, terminal:
            $ npm run build

        at /dist/out.css
            ...
            main {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -moz-box-orient: vertical;
                -moz-box-direction: normal;
                display: -webkit-box;
                display: -webkit-flex;
                display: -moz-box;
                display: -ms-flexbox;
                display: flex;
                -webkit-flex-direction: column;
                -ms-flex-direction: column;
                flex-direction: column
            }

            Works!


    Note: 
    Some features of current JavaScript might not get transpiled by Babel to the target browsers, 
    which will require a manual polyfill.

    https://babeljs.io/docs/en/babel-preset-env

    @babel/preset-env won't include any JavaScript syntax proposals less than Stage 3 
    because at that stage in the TC39 process, it wouldn't be implemented by any browsers anyway. 
    Those would need to be included manually. 
    The shippedProposals option will include Stage 3 proposals that some browsers have already implemented.

    @babel/preset-env takes any target environments you've specified and checks them against its mappings 
    to compile a list of plugins and passes it to Babel.

    For browser- or Electron-based projects, we recommend using browserslist to specify targets.

    By default @babel/preset-env will use browserslist config sources unless either the targets 
    or ignoreBrowserslistConfig options are set.


------------------------------------------------------
27. Install project dependencies: react, react-dom

    React is a declarative, efficient, and flexible JavaScript library for building user interfaces.
    https://reactjs.org/

    React will efficiently update and render just the right components when your data changes.
    Build encapsulated components that manage their own state, then compose them to make complex UIs.
    The component logic is written in JavaScript instead of templates.
    JSX is optional and not required to use React.

        If you’re creating a new single-page app, use Create React App or Vite.
        Create React App doesn’t handle backend logic or databases; it just creates a frontend build pipeline.
        Under the hood, it uses Babel and webpack.

        If you’re building a server-rendered website with Node.js, try Next.js.
        Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. It includes styling and routing solutions.

        If you’re building a static content-oriented website, try Gatsby.
        It lets you use React components, but outputs pre-rendered HTML and CSS to guarantee the fastest load time.

    A JavaScript build toolchain typically consists of:
    1. A package manager, such as Yarn or npm. 
    2. A bundler, such as Webpack or Parcel.
    3. A compiler such as Babel.

    https://www.npmjs.com/package/react
    The react package contains only the functionality necessary to define React components.
    It is typically used together with a React renderer like react-dom for the web, 
    or react-native for the native environments.
    Note: by default, React will be in development mode.

    https://www.npmjs.com/package/react-dom
    Serves as the entry point to the DOM and server renderers for React. 
    It is intended to be paired with the generic React package.


    First.
    Install:
    at the root dir of the project, in terminal (not as --save-dev):

        $ npm install react react-dom
    
    Second.
    To transpile the JSX: babel/preset-react

    https://www.npmjs.com/package/@babel/preset-react
    https://babeljs.io/docs/en/babel-preset-react

    Install:

        $ npm install --save-dev @babel/preset-react


    Third.
    Add it to the configuration file: babel.config.js, or .babelrc.json,
    with options

    at .babelrc.json

        {
            "presets": [
                "@babel/preset-env",
                ["@babel/preset-react", {
                    "runtime": "automatic", // enables loading not only React JSX
                    "importSource": "custom-jsx-library" // defaults to react (only in automatic runtime)
                }],],
        }


    When dealing with multiple loaders can be useful to have a
    babel.config.js

        module.exports = {
            presets: ["@babel/preset-env", ["@babel/preset-react", { /* options */ }]]
        }
    

    Fourth.
    Include React in the index.js (defined as the entry file in package.json)

    at index.js
    // import in ES6 syntax
    import { render } from "react-dom";

    // test if React is connected (without importing it, only react-dom)
    render(<p>React is connected!</p>, document.getElementById("root"));

    and, at the index-template.html
    add:
    <div id="root"></div>

    (React requires a parent block to inject)

    It is connected.


------------------------------------------------------
28. Building React components

    Create a directory at ./src and call it components

    ./src/components

    To be continued...

    (I need to study React by itself to compress instrucctions here)





------------------------------------------------------
29.



------------------------------------------------------
30.



------------------------------------------------------
xx. Set up the templating loaders

https://github.com/jantimon/html-webpack-plugin#writing-your-own-templates
https://github.com/jantimon/html-webpack-plugin/blob/main/docs/template-option.md


///////////

Webpack will grab any dependencies ref at the package.json entry file
so, to make it load the css and images they have to be referenced in the js that is loaded by the output html

The js will map what to load

    to import the css files into the js:

    // you need a loader for this
        import "./styles/main.scss";

    to import images to the js:
    // you need a loader for this
        import cryLaugh from "./images/cryLaugh.png";




::::::::::::::::::::::::::
Sources:
Notes from:
Webpack 5 Crash Course | Frontend Development Setup (2022)
https://www.youtube.com/watch?v=IZGNcSuwBZs

Project setup with Webpack 5 + (CSS, SASS, PostCSS) + browserlist + html-webpack-plugin + React 17
https://www.youtube.com/watch?v=TOb1c39m64A

Creating and Understanding a Basic Webpack 5 Setup
https://www.youtube.com/watch?v=X1nxTjVDYdQ

+
Anything related to above that interested me to add here, like official documentation, articles, etc


::::::::::::::::::::::::::